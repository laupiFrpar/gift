security:
    #  https://symfony.com/doc/current/security/authenticator_manager.html
    enable_authenticator_manager: true

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    role_hierarchy:
        ROLE_ADMIN: 'ROLE_USER'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: 'Lopi\Entity\User'
                property: 'email'

    firewalls:
        dev:
            pattern: '^/(_(profiler|wdt)|css|images|js)/'
            security: false

        api_authentication_token:
            pattern: '^/api/authentication'
            stateless: true
            json_login:
                check_path: 'api_authentication'
                success_handler: 'lexik_jwt_authentication.handler.authentication_success'
                failure_handler: 'lexik_jwt_authentication.handler.authentication_failure'

        api_authentication_token_refresh:
            pattern: '^/api/authentication_refresh'
            stateless: true
            refresh_jwt: ~

        api:
            pattern: '^/api/'
            stateless: true
            provider: 'app_user_provider'
            jwt: ~

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/docs', roles: 'PUBLIC_ACCESS', requires_channel: '%env(CHANNEL)%' },
        - { path: '^/api/authentication_token', roles: 'PUBLIC_ACCESS', requires_channel: '%env(CHANNEL)%'}
        - { path: '^/', roles: 'PUBLIC_ACCESS', requires_channel: '%env(CHANNEL)%' }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
